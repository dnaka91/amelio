(function() {var implementors = {};
implementors["amelio"] = [{"text":"impl Default for id","synthetic":false,"types":[]},{"text":"impl Default for ticket_id","synthetic":false,"types":[]},{"text":"impl Default for creator_id","synthetic":false,"types":[]},{"text":"impl Default for timestamp","synthetic":false,"types":[]},{"text":"impl Default for message","synthetic":false,"types":[]},{"text":"impl Default for id","synthetic":false,"types":[]},{"text":"impl Default for code","synthetic":false,"types":[]},{"text":"impl Default for title","synthetic":false,"types":[]},{"text":"impl Default for author_id","synthetic":false,"types":[]},{"text":"impl Default for tutor_id","synthetic":false,"types":[]},{"text":"impl Default for active","synthetic":false,"types":[]},{"text":"impl Default for ticket_id","synthetic":false,"types":[]},{"text":"impl Default for url","synthetic":false,"types":[]},{"text":"impl Default for ticket_id","synthetic":false,"types":[]},{"text":"impl Default for question","synthetic":false,"types":[]},{"text":"impl Default for answer","synthetic":false,"types":[]},{"text":"impl Default for ticket_id","synthetic":false,"types":[]},{"text":"impl Default for time","synthetic":false,"types":[]},{"text":"impl Default for ticket_id","synthetic":false,"types":[]},{"text":"impl Default for page","synthetic":false,"types":[]},{"text":"impl Default for line","synthetic":false,"types":[]},{"text":"impl Default for id","synthetic":false,"types":[]},{"text":"impl Default for created","synthetic":false,"types":[]},{"text":"impl Default for id","synthetic":false,"types":[]},{"text":"impl Default for type_","synthetic":false,"types":[]},{"text":"impl Default for title","synthetic":false,"types":[]},{"text":"impl Default for description","synthetic":false,"types":[]},{"text":"impl Default for category","synthetic":false,"types":[]},{"text":"impl Default for priority","synthetic":false,"types":[]},{"text":"impl Default for status","synthetic":false,"types":[]},{"text":"impl Default for forwarded","synthetic":false,"types":[]},{"text":"impl Default for course_id","synthetic":false,"types":[]},{"text":"impl Default for creator_id","synthetic":false,"types":[]},{"text":"impl Default for id","synthetic":false,"types":[]},{"text":"impl Default for username","synthetic":false,"types":[]},{"text":"impl Default for password","synthetic":false,"types":[]},{"text":"impl Default for name","synthetic":false,"types":[]},{"text":"impl Default for role","synthetic":false,"types":[]},{"text":"impl Default for active","synthetic":false,"types":[]},{"text":"impl Default for code","synthetic":false,"types":[]}];
implementors["anyhow"] = [{"text":"impl Default for Chain&lt;'_&gt;","synthetic":false,"types":[]}];
implementors["arrayvec"] = [{"text":"impl&lt;A&gt; Default for ArrayString&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Array&lt;Item = u8&gt; + Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Array&gt; Default for ArrayVec&lt;A&gt;","synthetic":false,"types":[]}];
implementors["askama_shared"] = [{"text":"impl&lt;'a&gt; Default for Syntax&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["bitvec"] = [{"text":"impl&lt;O, V&gt; Default for BitArray&lt;O, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: BitOrder,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: BitView + Sized,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Default&gt; Default for BitIdx&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: BitRegister,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Default&gt; Default for BitTail&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: BitRegister,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Default&gt; Default for BitPos&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: BitRegister,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Default&gt; Default for BitSel&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: BitRegister,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Default&gt; Default for BitMask&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: BitRegister,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Default for Msb0","synthetic":false,"types":[]},{"text":"impl Default for Lsb0","synthetic":false,"types":[]},{"text":"impl&lt;O, T&gt; Default for &amp;BitSlice&lt;O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: BitOrder,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: BitStore,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;O, T&gt; Default for &amp;mut BitSlice&lt;O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: BitOrder,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: BitStore,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;O, T&gt; Default for BitBox&lt;O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: BitOrder,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: BitStore,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;O, T&gt; Default for BitVec&lt;O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: BitOrder,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: BitStore,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["block_buffer"] = [{"text":"impl&lt;BlockSize:&nbsp;Default + ArrayLength&lt;u8&gt;&gt; Default for BlockBuffer&lt;BlockSize&gt;","synthetic":false,"types":[]}];
implementors["byteorder"] = [{"text":"impl Default for BigEndian","synthetic":false,"types":[]},{"text":"impl Default for LittleEndian","synthetic":false,"types":[]}];
implementors["chrono"] = [{"text":"impl Default for Parsed","synthetic":false,"types":[]}];
implementors["cookie"] = [{"text":"impl Default for CookieJar","synthetic":false,"types":[]}];
implementors["crypto_mac"] = [{"text":"impl Default for MacError","synthetic":false,"types":[]},{"text":"impl Default for InvalidKeyLength","synthetic":false,"types":[]}];
implementors["diesel"] = [{"text":"impl Default for AnsiTransactionManager","synthetic":false,"types":[]},{"text":"impl Default for Bool","synthetic":false,"types":[]},{"text":"impl Default for TinyInt","synthetic":false,"types":[]},{"text":"impl Default for SmallInt","synthetic":false,"types":[]},{"text":"impl Default for Integer","synthetic":false,"types":[]},{"text":"impl Default for BigInt","synthetic":false,"types":[]},{"text":"impl Default for Float","synthetic":false,"types":[]},{"text":"impl Default for Double","synthetic":false,"types":[]},{"text":"impl Default for Numeric","synthetic":false,"types":[]},{"text":"impl Default for Text","synthetic":false,"types":[]},{"text":"impl Default for Binary","synthetic":false,"types":[]},{"text":"impl Default for Date","synthetic":false,"types":[]},{"text":"impl Default for Interval","synthetic":false,"types":[]},{"text":"impl Default for Time","synthetic":false,"types":[]},{"text":"impl Default for Timestamp","synthetic":false,"types":[]},{"text":"impl&lt;ST:&nbsp;Default + NotNull&gt; Default for Nullable&lt;ST&gt;","synthetic":false,"types":[]},{"text":"impl Default for SqliteQueryBuilder","synthetic":false,"types":[]}];
implementors["digest"] = [{"text":"impl Default for InvalidOutputSize","synthetic":false,"types":[]}];
implementors["fnv"] = [{"text":"impl Default for FnvHasher","synthetic":false,"types":[]}];
implementors["generic_array"] = [{"text":"impl&lt;T:&nbsp;Default, N&gt; Default for GenericArray&lt;T, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: ArrayLength&lt;T&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["glob"] = [{"text":"impl Default for Pattern","synthetic":false,"types":[]},{"text":"impl Default for MatchOptions","synthetic":false,"types":[]}];
implementors["hashbrown"] = [{"text":"impl&lt;K, V, S&gt; Default for HashMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Default,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, S&gt; Default for HashSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Default,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["hyper"] = [{"text":"impl Default for Config","synthetic":false,"types":[]},{"text":"impl Default for Client","synthetic":false,"types":[]},{"text":"impl Default for RedirectPolicy","synthetic":false,"types":[]},{"text":"impl Default for Quality","synthetic":false,"types":[]},{"text":"impl Default for HttpConnector","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Default + SslClient, C:&nbsp;Default + NetworkConnector&gt; Default for HttpsConnector&lt;S, C&gt;","synthetic":false,"types":[]}];
implementors["idna"] = [{"text":"impl Default for Config","synthetic":false,"types":[]}];
implementors["indexmap"] = [{"text":"impl&lt;K, V, S&gt; Default for IndexMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Default,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, S&gt; Default for IndexSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Default,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["itoa"] = [{"text":"impl Default for Buffer","synthetic":false,"types":[]}];
implementors["language_tags"] = [{"text":"impl Default for LanguageTag","synthetic":false,"types":[]}];
implementors["lettre"] = [{"text":"impl Default for MockStream","synthetic":false,"types":[]},{"text":"impl Default for ClientCodec","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Default + Write + Read&gt; Default for InnerClient&lt;S&gt;","synthetic":false,"types":[]}];
implementors["lettre_email"] = [{"text":"impl Default for PartBuilder","synthetic":false,"types":[]},{"text":"impl Default for EmailBuilder","synthetic":false,"types":[]}];
implementors["libsqlite3_sys"] = [{"text":"impl Default for sqlite3_vtab","synthetic":false,"types":[]},{"text":"impl Default for sqlite3_vtab_cursor","synthetic":false,"types":[]}];
implementors["lock_api"] = [{"text":"impl&lt;R:&nbsp;RawMutex, T:&nbsp;?Sized + Default&gt; Default for Mutex&lt;R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;RawMutex, G:&nbsp;GetThreadId, T:&nbsp;?Sized + Default&gt; Default for ReentrantMutex&lt;R, G, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;RawRwLock, T:&nbsp;?Sized + Default&gt; Default for RwLock&lt;R, T&gt;","synthetic":false,"types":[]}];
implementors["nix"] = [{"text":"impl Default for CpuSet","synthetic":false,"types":[]},{"text":"impl Default for QuotaValidFlags","synthetic":false,"types":[]},{"text":"impl Default for Dqblk","synthetic":false,"types":[]},{"text":"impl Default for FdSet","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Default for AlgSetKey&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Default for UnixCredentials","synthetic":false,"types":[]},{"text":"impl Default for FsFlags","synthetic":false,"types":[]}];
implementors["openssl"] = [{"text":"impl Default for Sha1","synthetic":false,"types":[]},{"text":"impl Default for Sha224","synthetic":false,"types":[]},{"text":"impl Default for Sha256","synthetic":false,"types":[]},{"text":"impl Default for Sha384","synthetic":false,"types":[]},{"text":"impl Default for Sha512","synthetic":false,"types":[]},{"text":"impl Default for BasicConstraints","synthetic":false,"types":[]},{"text":"impl Default for KeyUsage","synthetic":false,"types":[]},{"text":"impl Default for ExtendedKeyUsage","synthetic":false,"types":[]},{"text":"impl Default for SubjectKeyIdentifier","synthetic":false,"types":[]},{"text":"impl Default for AuthorityKeyIdentifier","synthetic":false,"types":[]},{"text":"impl Default for SubjectAlternativeName","synthetic":false,"types":[]}];
implementors["parking_lot"] = [{"text":"impl Default for Condvar","synthetic":false,"types":[]},{"text":"impl Default for Once","synthetic":false,"types":[]}];
implementors["parking_lot_core"] = [{"text":"impl Default for UnparkResult","synthetic":false,"types":[]},{"text":"impl Default for SpinWait","synthetic":false,"types":[]}];
implementors["ppv_lite86"] = [{"text":"impl Default for vec128_storage","synthetic":false,"types":[]},{"text":"impl Default for vec256_storage","synthetic":false,"types":[]},{"text":"impl Default for vec512_storage","synthetic":false,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl Default for TokenStream","synthetic":false,"types":[]}];
implementors["r2d2"] = [{"text":"impl&lt;M&gt; Default for Builder&lt;M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: ManageConnection,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Default for Extensions","synthetic":false,"types":[]}];
implementors["rand"] = [{"text":"impl Default for ThreadRng","synthetic":false,"types":[]}];
implementors["rand_core"] = [{"text":"impl Default for OsRng","synthetic":false,"types":[]}];
implementors["rocket"] = [{"text":"impl&lt;'r&gt; Default for Response&lt;'r&gt;","synthetic":false,"types":[]},{"text":"impl Default for Limits","synthetic":false,"types":[]}];
implementors["rocket_http"] = [{"text":"impl Default for ContentType","synthetic":false,"types":[]},{"text":"impl&lt;'h&gt; Default for HeaderMap&lt;'h&gt;","synthetic":false,"types":[]}];
implementors["ryu"] = [{"text":"impl Default for Buffer","synthetic":false,"types":[]}];
implementors["serde"] = [{"text":"impl Default for IgnoredAny","synthetic":false,"types":[]}];
implementors["serde_json"] = [{"text":"impl Default for Map&lt;String, Value&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Default for PrettyFormatter&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Default for Value","synthetic":false,"types":[]}];
implementors["sha2"] = [{"text":"impl Default for Sha256","synthetic":false,"types":[]},{"text":"impl Default for Sha224","synthetic":false,"types":[]},{"text":"impl Default for Sha512","synthetic":false,"types":[]},{"text":"impl Default for Sha384","synthetic":false,"types":[]},{"text":"impl Default for Sha512Trunc256","synthetic":false,"types":[]},{"text":"impl Default for Sha512Trunc224","synthetic":false,"types":[]}];
implementors["siphasher"] = [{"text":"impl Default for SipHasher13","synthetic":false,"types":[]},{"text":"impl Default for SipHasher24","synthetic":false,"types":[]},{"text":"impl Default for SipHasher","synthetic":false,"types":[]},{"text":"impl Default for Hash128","synthetic":false,"types":[]},{"text":"impl Default for SipHasher13","synthetic":false,"types":[]},{"text":"impl Default for SipHasher24","synthetic":false,"types":[]},{"text":"impl Default for SipHasher","synthetic":false,"types":[]}];
implementors["smallvec"] = [{"text":"impl&lt;A:&nbsp;Array&gt; Default for SmallVec&lt;A&gt;","synthetic":false,"types":[]}];
implementors["syn"] = [{"text":"impl Default for Underscore","synthetic":false,"types":[]},{"text":"impl Default for Abstract","synthetic":false,"types":[]},{"text":"impl Default for As","synthetic":false,"types":[]},{"text":"impl Default for Async","synthetic":false,"types":[]},{"text":"impl Default for Auto","synthetic":false,"types":[]},{"text":"impl Default for Become","synthetic":false,"types":[]},{"text":"impl Default for Box","synthetic":false,"types":[]},{"text":"impl Default for Break","synthetic":false,"types":[]},{"text":"impl Default for Const","synthetic":false,"types":[]},{"text":"impl Default for Continue","synthetic":false,"types":[]},{"text":"impl Default for Crate","synthetic":false,"types":[]},{"text":"impl Default for Default","synthetic":false,"types":[]},{"text":"impl Default for Do","synthetic":false,"types":[]},{"text":"impl Default for Dyn","synthetic":false,"types":[]},{"text":"impl Default for Else","synthetic":false,"types":[]},{"text":"impl Default for Enum","synthetic":false,"types":[]},{"text":"impl Default for Existential","synthetic":false,"types":[]},{"text":"impl Default for Extern","synthetic":false,"types":[]},{"text":"impl Default for Final","synthetic":false,"types":[]},{"text":"impl Default for Fn","synthetic":false,"types":[]},{"text":"impl Default for For","synthetic":false,"types":[]},{"text":"impl Default for If","synthetic":false,"types":[]},{"text":"impl Default for Impl","synthetic":false,"types":[]},{"text":"impl Default for In","synthetic":false,"types":[]},{"text":"impl Default for Let","synthetic":false,"types":[]},{"text":"impl Default for Loop","synthetic":false,"types":[]},{"text":"impl Default for Macro","synthetic":false,"types":[]},{"text":"impl Default for Match","synthetic":false,"types":[]},{"text":"impl Default for Mod","synthetic":false,"types":[]},{"text":"impl Default for Move","synthetic":false,"types":[]},{"text":"impl Default for Mut","synthetic":false,"types":[]},{"text":"impl Default for Override","synthetic":false,"types":[]},{"text":"impl Default for Priv","synthetic":false,"types":[]},{"text":"impl Default for Pub","synthetic":false,"types":[]},{"text":"impl Default for Ref","synthetic":false,"types":[]},{"text":"impl Default for Return","synthetic":false,"types":[]},{"text":"impl Default for SelfType","synthetic":false,"types":[]},{"text":"impl Default for SelfValue","synthetic":false,"types":[]},{"text":"impl Default for Static","synthetic":false,"types":[]},{"text":"impl Default for Struct","synthetic":false,"types":[]},{"text":"impl Default for Super","synthetic":false,"types":[]},{"text":"impl Default for Trait","synthetic":false,"types":[]},{"text":"impl Default for Try","synthetic":false,"types":[]},{"text":"impl Default for Type","synthetic":false,"types":[]},{"text":"impl Default for Typeof","synthetic":false,"types":[]},{"text":"impl Default for Union","synthetic":false,"types":[]},{"text":"impl Default for Unsafe","synthetic":false,"types":[]},{"text":"impl Default for Unsized","synthetic":false,"types":[]},{"text":"impl Default for Use","synthetic":false,"types":[]},{"text":"impl Default for Virtual","synthetic":false,"types":[]},{"text":"impl Default for Where","synthetic":false,"types":[]},{"text":"impl Default for While","synthetic":false,"types":[]},{"text":"impl Default for Yield","synthetic":false,"types":[]},{"text":"impl Default for Add","synthetic":false,"types":[]},{"text":"impl Default for AddEq","synthetic":false,"types":[]},{"text":"impl Default for And","synthetic":false,"types":[]},{"text":"impl Default for AndAnd","synthetic":false,"types":[]},{"text":"impl Default for AndEq","synthetic":false,"types":[]},{"text":"impl Default for At","synthetic":false,"types":[]},{"text":"impl Default for Bang","synthetic":false,"types":[]},{"text":"impl Default for Caret","synthetic":false,"types":[]},{"text":"impl Default for CaretEq","synthetic":false,"types":[]},{"text":"impl Default for Colon","synthetic":false,"types":[]},{"text":"impl Default for Colon2","synthetic":false,"types":[]},{"text":"impl Default for Comma","synthetic":false,"types":[]},{"text":"impl Default for Div","synthetic":false,"types":[]},{"text":"impl Default for DivEq","synthetic":false,"types":[]},{"text":"impl Default for Dollar","synthetic":false,"types":[]},{"text":"impl Default for Dot","synthetic":false,"types":[]},{"text":"impl Default for Dot2","synthetic":false,"types":[]},{"text":"impl Default for Dot3","synthetic":false,"types":[]},{"text":"impl Default for DotDotEq","synthetic":false,"types":[]},{"text":"impl Default for Eq","synthetic":false,"types":[]},{"text":"impl Default for EqEq","synthetic":false,"types":[]},{"text":"impl Default for Ge","synthetic":false,"types":[]},{"text":"impl Default for Gt","synthetic":false,"types":[]},{"text":"impl Default for Le","synthetic":false,"types":[]},{"text":"impl Default for Lt","synthetic":false,"types":[]},{"text":"impl Default for MulEq","synthetic":false,"types":[]},{"text":"impl Default for Ne","synthetic":false,"types":[]},{"text":"impl Default for Or","synthetic":false,"types":[]},{"text":"impl Default for OrEq","synthetic":false,"types":[]},{"text":"impl Default for OrOr","synthetic":false,"types":[]},{"text":"impl Default for Pound","synthetic":false,"types":[]},{"text":"impl Default for Question","synthetic":false,"types":[]},{"text":"impl Default for RArrow","synthetic":false,"types":[]},{"text":"impl Default for LArrow","synthetic":false,"types":[]},{"text":"impl Default for Rem","synthetic":false,"types":[]},{"text":"impl Default for RemEq","synthetic":false,"types":[]},{"text":"impl Default for FatArrow","synthetic":false,"types":[]},{"text":"impl Default for Semi","synthetic":false,"types":[]},{"text":"impl Default for Shl","synthetic":false,"types":[]},{"text":"impl Default for ShlEq","synthetic":false,"types":[]},{"text":"impl Default for Shr","synthetic":false,"types":[]},{"text":"impl Default for ShrEq","synthetic":false,"types":[]},{"text":"impl Default for Star","synthetic":false,"types":[]},{"text":"impl Default for Sub","synthetic":false,"types":[]},{"text":"impl Default for SubEq","synthetic":false,"types":[]},{"text":"impl Default for Tilde","synthetic":false,"types":[]},{"text":"impl Default for Brace","synthetic":false,"types":[]},{"text":"impl Default for Bracket","synthetic":false,"types":[]},{"text":"impl Default for Paren","synthetic":false,"types":[]},{"text":"impl Default for Group","synthetic":false,"types":[]},{"text":"impl Default for Generics","synthetic":false,"types":[]},{"text":"impl Default for BoundLifetimes","synthetic":false,"types":[]},{"text":"impl Default for PathArguments","synthetic":false,"types":[]},{"text":"impl&lt;T, P&gt; Default for Punctuated&lt;T, P&gt;","synthetic":false,"types":[]}];
implementors["tinyvec"] = [{"text":"impl&lt;A:&nbsp;Array&gt; Default for ArrayVec&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'s, T&gt; Default for SliceVec&lt;'s, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Array&gt; Default for TinyVec&lt;A&gt;","synthetic":false,"types":[]}];
implementors["toml"] = [{"text":"impl Default for Map&lt;String, Value&gt;","synthetic":false,"types":[]}];
implementors["typenum"] = [{"text":"impl Default for B0","synthetic":false,"types":[]},{"text":"impl Default for B1","synthetic":false,"types":[]},{"text":"impl&lt;U:&nbsp;Default + Unsigned + NonZero&gt; Default for PInt&lt;U&gt;","synthetic":false,"types":[]},{"text":"impl&lt;U:&nbsp;Default + Unsigned + NonZero&gt; Default for NInt&lt;U&gt;","synthetic":false,"types":[]},{"text":"impl Default for Z0","synthetic":false,"types":[]},{"text":"impl Default for UTerm","synthetic":false,"types":[]},{"text":"impl&lt;U:&nbsp;Default, B:&nbsp;Default&gt; Default for UInt&lt;U, B&gt;","synthetic":false,"types":[]},{"text":"impl Default for Greater","synthetic":false,"types":[]},{"text":"impl Default for Less","synthetic":false,"types":[]},{"text":"impl Default for Equal","synthetic":false,"types":[]}];
implementors["unicase"] = [{"text":"impl&lt;S:&nbsp;Default&gt; Default for Ascii&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;AsRef&lt;str&gt; + Default&gt; Default for UniCase&lt;S&gt;","synthetic":false,"types":[]}];
implementors["universal_hash"] = [{"text":"impl Default for Error","synthetic":false,"types":[]}];
implementors["uuid"] = [{"text":"impl Default for Hyphenated","synthetic":false,"types":[]},{"text":"impl Default for Simple","synthetic":false,"types":[]},{"text":"impl Default for Urn","synthetic":false,"types":[]},{"text":"impl Default for Uuid","synthetic":false,"types":[]}];
implementors["yansi"] = [{"text":"impl&lt;T:&nbsp;Default&gt; Default for Paint&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Default for Style","synthetic":false,"types":[]},{"text":"impl Default for Color","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()