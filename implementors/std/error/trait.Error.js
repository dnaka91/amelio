(function() {var implementors = {};
implementors["arrayvec"] = [{"text":"impl&lt;T:&nbsp;Any&gt; Error for CapacityError&lt;T&gt;","synthetic":false,"types":[]}];
implementors["ascii_utils"] = [{"text":"impl Error for AsciiError","synthetic":false,"types":[]}];
implementors["askama_shared"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["base64"] = [{"text":"impl Error for DecodeError","synthetic":false,"types":[]}];
implementors["bcrypt"] = [{"text":"impl Error for BcryptError","synthetic":false,"types":[]}];
implementors["bufstream"] = [{"text":"impl&lt;W:&nbsp;Debug&gt; Error for IntoInnerError&lt;W&gt;","synthetic":false,"types":[]}];
implementors["chrono"] = [{"text":"impl Error for ParseError","synthetic":false,"types":[]},{"text":"impl Error for RoundingError","synthetic":false,"types":[]}];
implementors["cookie"] = [{"text":"impl Error for ParseError","synthetic":false,"types":[]}];
implementors["ctrlc"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["diesel"] = [{"text":"impl Error for Error","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]},{"text":"impl Error for ConnectionError","synthetic":false,"types":[]},{"text":"impl Error for UnexpectedNullError","synthetic":false,"types":[]},{"text":"impl Error for MigrationError","synthetic":false,"types":[]},{"text":"impl Error for RunMigrationsError","synthetic":false,"types":[]}];
implementors["digest"] = [{"text":"impl Error for InvalidOutputSize","synthetic":false,"types":[]}];
implementors["dotenv"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["email"] = [{"text":"impl Error for ParsingError","synthetic":false,"types":[]}];
implementors["fast_chemail"] = [{"text":"impl Error for ParseError","synthetic":false,"types":[]}];
implementors["getrandom"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["glob"] = [{"text":"impl Error for GlobError","synthetic":false,"types":[]},{"text":"impl Error for PatternError","synthetic":false,"types":[]}];
implementors["httparse"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["hyper"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["language_tags"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["lettre"] = [{"text":"impl Error for Error","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["lettre_email"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["libsqlite3_sys"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["log"] = [{"text":"impl Error for SetLoggerError","synthetic":false,"types":[]},{"text":"impl Error for ShutdownLoggerError","synthetic":false,"types":[]}];
implementors["mime"] = [{"text":"impl Error for FromStrError","synthetic":false,"types":[]}];
implementors["native_tls"] = [{"text":"impl Error for Error","synthetic":false,"types":[]},{"text":"impl&lt;S&gt; Error for HandshakeError&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Any + Debug,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["nix"] = [{"text":"impl Error for Errno","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["nom"] = [{"text":"impl&lt;I:&nbsp;Debug + Display&gt; Error for Error&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Error for Err&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Debug,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["openssl"] = [{"text":"impl Error for ErrorStack","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Debug&gt; Error for HandshakeError&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl Error for X509VerifyResult","synthetic":false,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl Error for LexError","synthetic":false,"types":[]}];
implementors["r2d2"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["rand"] = [{"text":"impl Error for BernoulliError","synthetic":false,"types":[]},{"text":"impl Error for WeightedError","synthetic":false,"types":[]},{"text":"impl Error for ReadError","synthetic":false,"types":[]}];
implementors["rand_core"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["rand_jitter"] = [{"text":"impl Error for TimerError","synthetic":false,"types":[]}];
implementors["rocket"] = [{"text":"impl Error for ConfigError","synthetic":false,"types":[]},{"text":"impl Error for LaunchError","synthetic":false,"types":[]}];
implementors["serde"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["serde_json"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["strum"] = [{"text":"impl Error for ParseError","synthetic":false,"types":[]}];
implementors["syn"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["time"] = [{"text":"impl Error for OutOfRangeError","synthetic":false,"types":[]},{"text":"impl Error for ParseError","synthetic":false,"types":[]}];
implementors["toml"] = [{"text":"impl Error for DatetimeParseError","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["url"] = [{"text":"impl Error for ParseError","synthetic":false,"types":[]}];
implementors["uuid"] = [{"text":"impl Error for ParseError","synthetic":false,"types":[]},{"text":"impl Error for BytesError","synthetic":false,"types":[]},{"text":"impl Error for Error","synthetic":false,"types":[]}];
implementors["walkdir"] = [{"text":"impl Error for Error","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()