(function() {var implementors = {};
implementors["aes_gcm"] = [{"text":"impl&lt;B, N&gt; UnwindSafe for AesGcm&lt;B, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["aes_soft"] = [{"text":"impl UnwindSafe for Aes128","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Aes192","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Aes256","synthetic":true,"types":[]}];
implementors["amelio"] = [{"text":"impl UnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SmtpConfig","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConnectionCustomizer","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for DbConnPool","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for DbConn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InitUserEntity","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NewUserEntity","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UserEntity","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InitCourseEntity","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NewCourseEntity","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CourseEntity","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InitTicketEntity","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NewTicketEntity","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TicketEntity","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MediumTextEntity","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MediumRecordingEntity","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MediumInteractiveEntity","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MediumQuestionaireEntity","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CommentEntity","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NewCommentEntity","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for UserRepositoryImpl&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for CourseRepositoryImpl&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for TicketRepositoryImpl&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for star","synthetic":true,"types":[]},{"text":"impl UnwindSafe for id","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ticket_id","synthetic":true,"types":[]},{"text":"impl UnwindSafe for creator_id","synthetic":true,"types":[]},{"text":"impl UnwindSafe for timestamp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for message","synthetic":true,"types":[]},{"text":"impl UnwindSafe for table","synthetic":true,"types":[]},{"text":"impl UnwindSafe for star","synthetic":true,"types":[]},{"text":"impl UnwindSafe for id","synthetic":true,"types":[]},{"text":"impl UnwindSafe for code","synthetic":true,"types":[]},{"text":"impl UnwindSafe for title","synthetic":true,"types":[]},{"text":"impl UnwindSafe for author_id","synthetic":true,"types":[]},{"text":"impl UnwindSafe for tutor_id","synthetic":true,"types":[]},{"text":"impl UnwindSafe for active","synthetic":true,"types":[]},{"text":"impl UnwindSafe for table","synthetic":true,"types":[]},{"text":"impl UnwindSafe for star","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ticket_id","synthetic":true,"types":[]},{"text":"impl UnwindSafe for url","synthetic":true,"types":[]},{"text":"impl UnwindSafe for table","synthetic":true,"types":[]},{"text":"impl UnwindSafe for star","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ticket_id","synthetic":true,"types":[]},{"text":"impl UnwindSafe for question","synthetic":true,"types":[]},{"text":"impl UnwindSafe for answer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for table","synthetic":true,"types":[]},{"text":"impl UnwindSafe for star","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ticket_id","synthetic":true,"types":[]},{"text":"impl UnwindSafe for time","synthetic":true,"types":[]},{"text":"impl UnwindSafe for table","synthetic":true,"types":[]},{"text":"impl UnwindSafe for star","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ticket_id","synthetic":true,"types":[]},{"text":"impl UnwindSafe for page","synthetic":true,"types":[]},{"text":"impl UnwindSafe for line","synthetic":true,"types":[]},{"text":"impl UnwindSafe for table","synthetic":true,"types":[]},{"text":"impl UnwindSafe for star","synthetic":true,"types":[]},{"text":"impl UnwindSafe for id","synthetic":true,"types":[]},{"text":"impl UnwindSafe for created","synthetic":true,"types":[]},{"text":"impl UnwindSafe for table","synthetic":true,"types":[]},{"text":"impl UnwindSafe for star","synthetic":true,"types":[]},{"text":"impl UnwindSafe for id","synthetic":true,"types":[]},{"text":"impl UnwindSafe for type_","synthetic":true,"types":[]},{"text":"impl UnwindSafe for title","synthetic":true,"types":[]},{"text":"impl UnwindSafe for description","synthetic":true,"types":[]},{"text":"impl UnwindSafe for category","synthetic":true,"types":[]},{"text":"impl UnwindSafe for priority","synthetic":true,"types":[]},{"text":"impl UnwindSafe for status","synthetic":true,"types":[]},{"text":"impl UnwindSafe for forwarded","synthetic":true,"types":[]},{"text":"impl UnwindSafe for course_id","synthetic":true,"types":[]},{"text":"impl UnwindSafe for creator_id","synthetic":true,"types":[]},{"text":"impl UnwindSafe for table","synthetic":true,"types":[]},{"text":"impl UnwindSafe for star","synthetic":true,"types":[]},{"text":"impl UnwindSafe for id","synthetic":true,"types":[]},{"text":"impl UnwindSafe for username","synthetic":true,"types":[]},{"text":"impl UnwindSafe for password","synthetic":true,"types":[]},{"text":"impl UnwindSafe for name","synthetic":true,"types":[]},{"text":"impl UnwindSafe for role","synthetic":true,"types":[]},{"text":"impl UnwindSafe for active","synthetic":true,"types":[]},{"text":"impl UnwindSafe for code","synthetic":true,"types":[]},{"text":"impl UnwindSafe for table","synthetic":true,"types":[]},{"text":"impl UnwindSafe for _Dummy","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EmbeddedMigration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DbMigrations","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Samples","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TicketData","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Mail&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SmtpSender&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for StatusDetails&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for CommentDetails&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for MailRendererImpl&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Csp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Auth","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HasherImpl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Role","synthetic":true,"types":[]},{"text":"impl UnwindSafe for User","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NewUser","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EditUser","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Course","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NewCourse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EditCourse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CourseWithNames","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TicketType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MediumType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Category","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Priority","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Status","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ticket","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TicketWithNames","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TicketWithRels","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Medium","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NewTicket","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EditTicket","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NewMedium","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Comment","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CommentWithNames","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NewComment","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TicketSearch","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AuthUser","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NoUser","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for AdminUser&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for AuthorUser&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for TutorUser&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for StudentUser&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for IfNoneMatch&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Assets","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Login","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NewCourse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EditCourse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NewTicketData","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NewTicket","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Medium","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EditResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EditTicket","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NewComment","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SearchOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NewUser","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Activate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EditUser","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ServerError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NonEmptyString","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; UnwindSafe for PositiveNum&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Hour","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Minute","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ValidUrl","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Credentials&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R, H&gt; UnwindSafe for LoginServiceImpl&lt;R, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, MS, MR, H&gt; UnwindSafe for UserServiceImpl&lt;R, MS, MR, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;MR: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;MS: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;UR, CR&gt; UnwindSafe for CourseServiceImpl&lt;UR, CR&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;CR: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;UR: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;TR, CR, UR, MS, MR&gt; UnwindSafe for TicketServiceImpl&lt;TR, CR, UR, MS, MR&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;CR: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;MR: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;MS: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;TR: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;UR: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MessageCode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Index","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Login","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Faq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Users","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NewUser","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ActivateUser","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EditUser","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Courses","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NewCourse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EditCourse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NewTicket","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TicketDetail","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SearchTickets","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error403","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error404","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error500","synthetic":true,"types":[]}];
implementors["anyhow"] = [{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Chain&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["arrayvec"] = [{"text":"impl&lt;A&gt; UnwindSafe for ArrayString&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for CapacityError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for ArrayVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for IntoIter&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; UnwindSafe for Drain&lt;'a, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["ascii_utils"] = [{"text":"impl UnwindSafe for AsciiError","synthetic":true,"types":[]}];
implementors["askama_escape"] = [{"text":"impl&lt;E, T&gt; UnwindSafe for MarkupDisplay&lt;E, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E, W&gt; UnwindSafe for EscapeWriter&lt;'a, E, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; UnwindSafe for Escaped&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Html","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Text","synthetic":true,"types":[]}];
implementors["askama_shared"] = [{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for TemplateLoop&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LoopItem","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Config&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Syntax&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Integrations","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompileError","synthetic":true,"types":[]}];
implementors["base64"] = [{"text":"impl&lt;'a&gt; UnwindSafe for Base64Display&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; !UnwindSafe for EncoderWriter&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DecodeError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CharacterSet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Config","synthetic":true,"types":[]}];
implementors["bcrypt"] = [{"text":"impl !UnwindSafe for BcryptError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HashParts","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Version","synthetic":true,"types":[]}];
implementors["bitvec"] = [{"text":"impl&lt;O, V&gt; UnwindSafe for BitArray&lt;O, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; UnwindSafe for BitDomain&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Mem: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; !UnwindSafe for BitDomainMut&lt;'a, O, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Domain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Mem: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for DomainMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for BitIdx&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for BitTail&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for BitPos&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for BitSel&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for BitMask&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Msb0","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Lsb0","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; UnwindSafe for Iter&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Mem: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; !UnwindSafe for IterMut&lt;'a, O, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; UnwindSafe for Windows&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; UnwindSafe for Chunks&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; !UnwindSafe for ChunksMut&lt;'a, O, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; UnwindSafe for ChunksExact&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; !UnwindSafe for ChunksExactMut&lt;'a, O, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; UnwindSafe for RChunks&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; !UnwindSafe for RChunksMut&lt;'a, O, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; UnwindSafe for RChunksExact&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; !UnwindSafe for RChunksExactMut&lt;'a, O, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, P&gt; UnwindSafe for Split&lt;'a, O, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, P&gt; !UnwindSafe for SplitMut&lt;'a, O, T, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, P&gt; UnwindSafe for RSplit&lt;'a, O, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, P&gt; !UnwindSafe for RSplitMut&lt;'a, O, T, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, P&gt; UnwindSafe for SplitN&lt;'a, O, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, P&gt; !UnwindSafe for SplitNMut&lt;'a, O, T, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, P&gt; UnwindSafe for RSplitN&lt;'a, O, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, P&gt; !UnwindSafe for RSplitNMut&lt;'a, O, T, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; !UnwindSafe for BitMut&lt;'a, O, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;O, T&gt; UnwindSafe for BitSlice&lt;O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;O, T&gt; UnwindSafe for BitBox&lt;O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;O, T&gt; UnwindSafe for IntoIter&lt;O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Mem: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; UnwindSafe for Drain&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Mem: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, I&gt; UnwindSafe for Splice&lt;'a, O, T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Mem: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;O, T&gt; UnwindSafe for BitVec&lt;O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["block_buffer"] = [{"text":"impl&lt;BlockSize&gt; UnwindSafe for BlockBuffer&lt;BlockSize&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;BlockSize as ArrayLength&lt;u8&gt;&gt;::ArrayType: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["blowfish"] = [{"text":"impl&lt;T&gt; UnwindSafe for Blowfish&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["bufstream"] = [{"text":"impl&lt;S&gt; UnwindSafe for BufStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; !UnwindSafe for IntoInnerError&lt;W&gt;","synthetic":true,"types":[]}];
implementors["byteorder"] = [{"text":"impl UnwindSafe for BigEndian","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LittleEndian","synthetic":true,"types":[]}];
implementors["chrono"] = [{"text":"impl UnwindSafe for FixedOffset","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Local","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Utc","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for LocalResult&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NaiveDate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NaiveDateTime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IsoWeek","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NaiveTime","synthetic":true,"types":[]},{"text":"impl&lt;Tz&gt; UnwindSafe for Date&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Tz as TimeZone&gt;::Offset: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SecondsFormat","synthetic":true,"types":[]},{"text":"impl&lt;Tz&gt; UnwindSafe for DateTime&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Tz as TimeZone&gt;::Offset: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Parsed","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for StrftimeItems&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pad","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Numeric","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InternalNumeric","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Fixed","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InternalFixed","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Item&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParseError","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for DelayedFormat&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RoundingError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Weekday","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParseWeekdayError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Month","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParseMonthError","synthetic":true,"types":[]}];
implementors["chrono_tz"] = [{"text":"impl UnwindSafe for Tz","synthetic":true,"types":[]}];
implementors["cookie"] = [{"text":"impl UnwindSafe for CookieBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParseError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CookieJar","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Delta&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SameSite","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Key","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for PrivateJar&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for SignedJar&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c&gt; UnwindSafe for Cookie&lt;'c&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'c&gt; UnwindSafe for EncodedCookie&lt;'a, 'c&gt;","synthetic":true,"types":[]}];
implementors["ctrlc"] = [{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SignalType","synthetic":true,"types":[]}];
implementors["devise_core"] = [{"text":"impl&lt;'p&gt; !UnwindSafe for FieldParent&lt;'p&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'p&gt; !UnwindSafe for Fields&lt;'p&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'f&gt; !UnwindSafe for Field&lt;'f&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for DeriveGenerator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GenericSupport","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DataSupport","synthetic":true,"types":[]},{"text":"impl&lt;'p, T&gt; !UnwindSafe for Derived&lt;'p, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for MetaItem&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for MetaItemList&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for SpanWrapped&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GenericKind","synthetic":true,"types":[]}];
implementors["diesel"] = [{"text":"impl UnwindSafe for AnsiTransactionManager","synthetic":true,"types":[]},{"text":"impl UnwindSafe for now","synthetic":true,"types":[]},{"text":"impl&lt;ST, T&gt; UnwindSafe for SqlLiteral&lt;ST, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;ST: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Query, Value&gt; UnwindSafe for UncheckedBind&lt;Query, Value&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Query: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Value: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, DB&gt; !UnwindSafe for AstPass&lt;'a, DB&gt;","synthetic":true,"types":[]},{"text":"impl&lt;DB&gt; UnwindSafe for RawBytesBindCollector&lt;DB&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;DB as TypeMetadata&gt;::TypeMetadata: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, DB&gt; UnwindSafe for DebugQuery&lt;'a, T, DB&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DB: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U, Ret&gt; UnwindSafe for DeleteStatement&lt;T, U, Ret&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ret: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, Op&gt; UnwindSafe for IncompleteInsertStatement&lt;T, Op&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Op: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U, Op, Ret&gt; UnwindSafe for InsertStatement&lt;T, U, Op, Ret&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Op: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ret: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SqlQuery","synthetic":true,"types":[]},{"text":"impl&lt;T, U, V, Ret&gt; UnwindSafe for UpdateStatement&lt;T, U, V, Ret&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ret: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Never","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Once","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MoreThanOnce","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for ConnectionManager&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DatabaseErrorKind","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ConnectionError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnexpectedNullError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IsNull","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, DB&gt; UnwindSafe for Output&lt;'a, T, DB&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;DB as TypeMetadata&gt;::MetadataLookup: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bool","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TinyInt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SmallInt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Integer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BigInt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Float","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Double","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Numeric","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Text","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Binary","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Date","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Interval","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Time","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Timestamp","synthetic":true,"types":[]},{"text":"impl&lt;ST&gt; UnwindSafe for Nullable&lt;ST&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;ST: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for MigrationError","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for RunMigrationsError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sqlite","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SqliteType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SqliteConnection","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SqliteQueryBuilder","synthetic":true,"types":[]}];
implementors["digest"] = [{"text":"impl UnwindSafe for InvalidOutputSize","synthetic":true,"types":[]}];
implementors["dotenv"] = [{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]}];
implementors["email"] = [{"text":"impl&lt;'s&gt; UnwindSafe for Rfc5322Parser&lt;'s&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rfc5322Builder","synthetic":true,"types":[]},{"text":"impl&lt;'s&gt; UnwindSafe for Rfc2045Parser&lt;'s&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'s&gt; UnwindSafe for Rfc822DateParser&lt;'s&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MimeContentTypeHeader","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MimeContentTransferEncoding","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParsingError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Header","synthetic":true,"types":[]},{"text":"impl&lt;'s&gt; UnwindSafe for HeaderIter&lt;'s&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HeaderMap","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Address","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Mailbox","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MimeMultipartType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MimeMessage","synthetic":true,"types":[]}];
implementors["encoding"] = [{"text":"impl UnwindSafe for CodecError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DecoderTrap","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EncoderTrap","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ErrorEncoding","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ErrorEncoder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ErrorDecoder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ASCIIEncoding","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ASCIIEncoder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ASCIIDecoder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SingleByteEncoding","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SingleByteEncoder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SingleByteDecoder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UTF8Encoding","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UTF8Encoder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UTF8Decoder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Little","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Big","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for UTF16Encoding&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for UTF16Encoder&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for UTF16Decoder&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Windows949Encoding","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Windows949Encoder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EUCJPEncoding","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EUCJPEncoder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Windows31JEncoding","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Windows31JEncoder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ISO2022JPEncoding","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ISO2022JPEncoder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GBK","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GB18030","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for GBEncoding&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for GBEncoder&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HZEncoding","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HZEncoder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BigFive2003Encoding","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BigFive2003Encoder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EncoderOnlyUTF8Encoding","synthetic":true,"types":[]}];
implementors["fast_chemail"] = [{"text":"impl UnwindSafe for ParseError","synthetic":true,"types":[]}];
implementors["fnv"] = [{"text":"impl UnwindSafe for FnvHasher","synthetic":true,"types":[]}];
implementors["form_urlencoded"] = [{"text":"impl&lt;'a&gt; UnwindSafe for Parse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for ParseIntoOwned&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for ByteSerialize&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for Serializer&lt;'a, T&gt;","synthetic":true,"types":[]}];
implementors["getrandom"] = [{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]}];
implementors["glob"] = [{"text":"impl !UnwindSafe for Paths","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for GlobError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatternError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pattern","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MatchOptions","synthetic":true,"types":[]}];
implementors["hkdf"] = [{"text":"impl UnwindSafe for InvalidPrkLength","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InvalidLength","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; UnwindSafe for Hkdf&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;D as BlockInput&gt;::BlockSize as ArrayLength&lt;u8&gt;&gt;::ArrayType: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["hmac"] = [{"text":"impl&lt;D&gt; UnwindSafe for Hmac&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;D as BlockInput&gt;::BlockSize as ArrayLength&lt;u8&gt;&gt;::ArrayType: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["httparse"] = [{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InvalidChunkSize","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Status&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'headers, 'buf&gt; !UnwindSafe for Request&lt;'headers, 'buf&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'headers, 'buf&gt; !UnwindSafe for Response&lt;'headers, 'buf&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Header&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["humansize"] = [{"text":"impl UnwindSafe for Kilo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FixedAt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FileSizeOpts","synthetic":true,"types":[]}];
implementors["hyper"] = [{"text":"impl&lt;C&gt; !UnwindSafe for Pool&lt;C&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for PooledStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; !UnwindSafe for Request&lt;W&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Response","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Client","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for RequestBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Body&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;C, S&gt; UnwindSafe for ProxyConfig&lt;C, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RedirectPolicy","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Method","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Accept","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AccessControlAllowCredentials","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AccessControlAllowHeaders","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AccessControlAllowMethods","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AccessControlAllowOrigin","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AccessControlExposeHeaders","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AccessControlMaxAge","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AccessControlRequestHeaders","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AccessControlRequestMethod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AcceptCharset","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AcceptEncoding","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AcceptLanguage","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AcceptRanges","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RangeUnit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Allow","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for Authorization&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Basic","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bearer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CacheControl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CacheDirective","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Cookie","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConnectionOption","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Connection","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DispositionType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DispositionParam","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ContentDisposition","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ContentEncoding","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ContentLanguage","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ContentLength","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ContentRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ContentRangeSpec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ContentType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Date","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ETag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Expect","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Expires","synthetic":true,"types":[]},{"text":"impl UnwindSafe for From","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Host","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IfMatch","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IfModifiedSince","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IfNoneMatch","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IfRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IfUnmodifiedSince","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LastModified","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Location","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Origin","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pragma","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Prefer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Preference","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PreferenceApplied","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Range","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ByteRangeSpec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Referer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReferrerPolicy","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Server","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetCookie","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StrictTransportSecurity","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TransferEncoding","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Upgrade","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ProtocolName","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Protocol","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UserAgent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Vary","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Link","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LinkValue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MediaDesc","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RelationType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Charset","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Encoding","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EntityTag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HttpDate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Quality","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for QualityItem&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExtendedValue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HTTP_VALUE","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Headers","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for HeadersItems&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for HeaderView&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, H&gt; UnwindSafe for HeaderFormatter&lt;'a, H&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;H: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Http11Message","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Http11Protocol","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for HttpReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for HttpWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; !UnwindSafe for EndError&lt;W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !UnwindSafe for Incoming&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for RequestHead","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ResponseHead","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RawStatus","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Fresh","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Streaming","synthetic":true,"types":[]},{"text":"impl&lt;'a, N&gt; !UnwindSafe for NetworkConnections&lt;'a, N&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HttpListener","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HttpStream","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HttpConnector","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for HttpsStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for HttpsListener&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, C&gt; UnwindSafe for HttpsConnector&lt;S, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !UnwindSafe for Request&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&nbsp;=&nbsp;Fresh&gt; !UnwindSafe for Response&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;L&gt; UnwindSafe for Server&lt;L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Listening","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StatusCode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StatusClass","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RequestUri","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HttpVersion","synthetic":true,"types":[]}];
implementors["idna"] = [{"text":"impl UnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Errors","synthetic":true,"types":[]}];
implementors["indexmap"] = [{"text":"impl&lt;'a, K, V&gt; !UnwindSafe for OccupiedEntry&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !UnwindSafe for Entry&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !UnwindSafe for VacantEntry&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V, S&gt; UnwindSafe for IndexMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; UnwindSafe for Keys&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; UnwindSafe for Values&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !UnwindSafe for ValuesMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; UnwindSafe for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; !UnwindSafe for IterMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; UnwindSafe for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; UnwindSafe for Drain&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; UnwindSafe for IndexSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Drain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; UnwindSafe for Difference&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; UnwindSafe for Intersection&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S1, S2&gt; UnwindSafe for SymmetricDifference&lt;'a, T, S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; UnwindSafe for Union&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["language_tags"] = [{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LanguageTag","synthetic":true,"types":[]}];
implementors["lettre"] = [{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Credentials","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Mechanism","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MockStream","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClientTlsParameters","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NetworkStream","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClientCodec","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for InnerClient&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EhloCommand","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StarttlsCommand","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MailCommand","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RcptCommand","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DataCommand","synthetic":true,"types":[]},{"text":"impl UnwindSafe for QuitCommand","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NoopCommand","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HelpCommand","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VrfyCommand","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExpnCommand","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RsetCommand","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AuthCommand","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClientId","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Extension","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ServerInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MailParameter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MailBodyParameter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RcptParameter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Severity","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Category","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Detail","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Code","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Response","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for XText&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClientSecurity","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConnectionReuseParameters","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SmtpClient","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SmtpTransport","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StubTransport","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EmailAddress","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Envelope","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Message","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for SendableEmail","synthetic":true,"types":[]}];
implementors["lettre_email"] = [{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PartBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EmailBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Email","synthetic":true,"types":[]}];
implementors["lexical_core"] = [{"text":"impl UnwindSafe for ErrorCode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]}];
implementors["libsqlite3_sys"] = [{"text":"impl UnwindSafe for ErrorCode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for sqlite3","synthetic":true,"types":[]},{"text":"impl UnwindSafe for sqlite3_file","synthetic":true,"types":[]},{"text":"impl UnwindSafe for sqlite3_io_methods","synthetic":true,"types":[]},{"text":"impl UnwindSafe for sqlite3_mutex","synthetic":true,"types":[]},{"text":"impl UnwindSafe for sqlite3_api_routines","synthetic":true,"types":[]},{"text":"impl UnwindSafe for sqlite3_vfs","synthetic":true,"types":[]},{"text":"impl UnwindSafe for sqlite3_mem_methods","synthetic":true,"types":[]},{"text":"impl UnwindSafe for sqlite3_stmt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for sqlite3_value","synthetic":true,"types":[]},{"text":"impl UnwindSafe for sqlite3_context","synthetic":true,"types":[]},{"text":"impl UnwindSafe for sqlite3_module","synthetic":true,"types":[]},{"text":"impl UnwindSafe for sqlite3_index_info","synthetic":true,"types":[]},{"text":"impl UnwindSafe for sqlite3_index_info_sqlite3_index_constraint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for sqlite3_index_info_sqlite3_index_orderby","synthetic":true,"types":[]},{"text":"impl UnwindSafe for sqlite3_index_info_sqlite3_index_constraint_usage","synthetic":true,"types":[]},{"text":"impl UnwindSafe for sqlite3_vtab","synthetic":true,"types":[]},{"text":"impl UnwindSafe for sqlite3_vtab_cursor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for sqlite3_blob","synthetic":true,"types":[]},{"text":"impl UnwindSafe for sqlite3_mutex_methods","synthetic":true,"types":[]},{"text":"impl UnwindSafe for sqlite3_str","synthetic":true,"types":[]},{"text":"impl UnwindSafe for sqlite3_pcache","synthetic":true,"types":[]},{"text":"impl UnwindSafe for sqlite3_pcache_page","synthetic":true,"types":[]},{"text":"impl UnwindSafe for sqlite3_pcache_methods2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for sqlite3_pcache_methods","synthetic":true,"types":[]},{"text":"impl UnwindSafe for sqlite3_backup","synthetic":true,"types":[]},{"text":"impl UnwindSafe for sqlite3_snapshot","synthetic":true,"types":[]},{"text":"impl UnwindSafe for sqlite3_rtree_geometry","synthetic":true,"types":[]},{"text":"impl UnwindSafe for sqlite3_rtree_query_info","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Fts5Context","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Fts5PhraseIter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Fts5ExtensionApi","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Fts5Tokenizer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for fts5_tokenizer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for fts5_api","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Limit","synthetic":true,"types":[]}];
implementors["log"] = [{"text":"impl UnwindSafe for LogLevel","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LogLevelFilter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for LogRecord&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for LogMetadata&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LogLocation","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MaxLogLevelFilter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetLoggerError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ShutdownLoggerError","synthetic":true,"types":[]}];
implementors["memchr"] = [{"text":"impl&lt;'a&gt; UnwindSafe for Memchr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Memchr2&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Memchr3&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["migrations_internals"] = [{"text":"impl&lt;'a&gt; !UnwindSafe for MigrationName&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for MigrationFileName&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["mime"] = [{"text":"impl&lt;T&gt; UnwindSafe for Mime&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TopLevel","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SubLevel","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Attr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Value","synthetic":true,"types":[]}];
implementors["mime_guess"] = [{"text":"impl UnwindSafe for MimeGuess","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Iter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IterRaw","synthetic":true,"types":[]}];
implementors["native_tls"] = [{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Identity","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Certificate","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !UnwindSafe for MidHandshakeTlsStream&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !UnwindSafe for HandshakeError&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Protocol","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TlsConnectorBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TlsConnector","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TlsAcceptorBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TlsAcceptor","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for TlsStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["nix"] = [{"text":"impl UnwindSafe for Dir","synthetic":true,"types":[]},{"text":"impl&lt;'d&gt; !UnwindSafe for Iter&lt;'d&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Entry","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Errno","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PosixFadviseAdvice","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AtFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OFlag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SealFlag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FdFlag","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for FcntlArg&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FlockArg","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SpliceFFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FallocateFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InterfaceAddress","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InterfaceAddressIterator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ModuleInitFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeleteModuleFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MsFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MntFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MQ_OFlag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FdFlag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MqAttr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InterfaceFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PollFd","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PollFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OpenptyResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ForkptyResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PtyMaster","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CloneFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CpuSet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AioFsyncMode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LioOpcode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LioMode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AioCancelStat","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Buffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for AioCb&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for LioCb&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EpollFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EpollOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EpollCreateFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EpollEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EfdFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MemFdCreateFlag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ProtFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MapFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MmapAdvise","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MsFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MlockAllFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Options","synthetic":true,"types":[]},{"text":"impl UnwindSafe for QuotaType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for QuotaFmt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for QuotaValidFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dqblk","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RebootMode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FdSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Fds&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SigEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Signal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SignalIterator","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SaFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SigmaskHow","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SigSet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SigHandler","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SigAction","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SigevNotify","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SfdFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SignalFd","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NetlinkAddr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AlgAddr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LinkAddr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VsockAddr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AddressFamily","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InetAddr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IpAddr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ipv4Addr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ipv6Addr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnixAddr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SockAddr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReuseAddr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReusePort","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TcpNoDelay","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Linger","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IpAddMembership","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IpDropMembership","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ipv6AddMembership","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ipv6DropMembership","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IpMulticastTtl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IpMulticastLoop","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReceiveTimeout","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SendTimeout","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Broadcast","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OobInline","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SocketError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KeepAlive","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PeerCredentials","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TcpKeepIdle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RcvBuf","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SndBuf","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RcvBufForce","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SndBufForce","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SockType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AcceptConn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BindToDevice","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OriginalDst","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReceiveTimestamp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IpTransparent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Mark","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PassCred","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TcpCongestion","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ipv4PacketInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ipv6RecvPacketInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UdpGsoSegment","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UdpGroSegment","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AlgSetAeadAuthSize","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for AlgSetKey&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SockType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SockProtocol","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SockFlag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MsgFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnixCredentials","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IpMembershipRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ipv6MembershipRequest","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for RecvMsg&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for CmsgIterator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ControlMessageOwned","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for ControlMessage&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, C&gt; UnwindSafe for SendMmsgData&lt;'a, I, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; !UnwindSafe for RecvMmsgData&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SockLevel","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Shutdown","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SFlag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Mode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FchmodatFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UtimensatFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Statfs","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FsType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FsFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Statvfs","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SysInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Termios","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BaudRate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SetArg","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FlushArg","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FlowArg","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SpecialCharacterIndices","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InputFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OutputFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ControlFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LocalFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TimeSpec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TimeVal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RemoteIoVec","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IoVec&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UtsName","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WaitPidFlag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WaitStatus","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AddWatchFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InitFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Inotify","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WatchDescriptor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for InotifyEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TimerFd","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClockId","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TimerFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TimerSetTimeFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Expiration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UContext","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Uid","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Gid","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pid","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ForkResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FchownatFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Whence","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LinkatFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnlinkatFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PathconfVar","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SysconfVar","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AccessFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for User","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]}];
implementors["nom"] = [{"text":"impl&lt;I&gt; UnwindSafe for Error&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for VerboseError&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VerboseErrorKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Needed","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for Err&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, G, O1&gt; UnwindSafe for Map&lt;F, G, O1&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;O1: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, G, O1&gt; UnwindSafe for FlatMap&lt;F, G, O1&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;O1: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, G, O1&gt; UnwindSafe for AndThen&lt;F, G, O1&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;O1: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, G&gt; UnwindSafe for And&lt;F, G&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, G&gt; UnwindSafe for Or&lt;F, G&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, O1, O2, E1, E2&gt; UnwindSafe for Into&lt;F, O1, O2, E1, E2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;E2: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;O1: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;O2: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompareResult","synthetic":true,"types":[]},{"text":"impl&lt;I, E, F&gt; UnwindSafe for ParserIterator&lt;I, E, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Endianness","synthetic":true,"types":[]}];
implementors["num_integer"] = [{"text":"impl&lt;A&gt; UnwindSafe for ExtendedGcd&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IterBinomial&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_traits"] = [{"text":"impl UnwindSafe for FloatErrorKind","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParseFloatError","synthetic":true,"types":[]}];
implementors["openssl"] = [{"text":"impl UnwindSafe for KeyError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AesKey","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Asn1GeneralizedTime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Asn1GeneralizedTimeRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TimeDiff","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Asn1Time","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Asn1TimeRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Asn1String","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Asn1StringRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Asn1Integer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Asn1IntegerRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Asn1BitString","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Asn1BitStringRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Asn1Object","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Asn1ObjectRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MsbOption","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BigNumContext","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BigNumContextRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BigNum","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BigNumRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CMSOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CmsContentInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CmsContentInfoRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConfMethod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Conf","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConfRef","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Deriver&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Dh&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for DhRef&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Dsa&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for DsaRef&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PointConversionForm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Asn1Flag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EcGroup","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EcGroupRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EcPoint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EcPointRef","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for EcKey&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for EcKeyRef&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EcdsaSig","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EcdsaSigRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Seal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Open","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ErrorStack","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; UnwindSafe for Index&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MessageDigest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Hasher","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DigestBytes","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SignatureAlgorithms","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Nid","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OcspFlag","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OcspResponseStatus","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OcspCertStatus","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OcspRevokedStatus","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for OcspStatus&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OcspBasicResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OcspBasicResponseRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OcspCertId","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OcspCertIdRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OcspResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OcspResponseRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OcspRequest","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OcspRequestRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OcspOneReq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OcspOneReqRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pkcs12","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pkcs12Ref","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParsedPkcs12","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pkcs12Builder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KeyIvPair","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pkcs7","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pkcs7Ref","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pkcs7Flags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Params","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Public","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Private","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Id","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for PKey&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for PKeyRef&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Padding","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Rsa&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for RsaRef&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RsaPrivateKeyBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sha1","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sha224","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sha256","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sha384","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sha512","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RsaPssSaltlen","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Signer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Verifier&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SrtpProtectionProfile","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SrtpProtectionProfileRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SrtpProfileId","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslConnector","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslConnectorBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConnectConfiguration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslAcceptor","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslAcceptorBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ErrorCode","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !UnwindSafe for HandshakeError&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslOptions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslMode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslMethod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslVerifyMode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslSessionCacheMode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExtensionContext","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslFiletype","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StatusType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NameType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SniError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslAlert","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AlpnError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ClientHelloResponse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslVersion","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslContextBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslContext","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslContextRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CipherBits","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslCipher","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslCipherRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslSession","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslSessionRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ssl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SslRef","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !UnwindSafe for MidHandshakeSslStream&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for SslStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for SslStreamBuilder&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ShutdownResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ShutdownState","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Stack&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Stackable&gt;::StackType: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Stackable&gt;::StackType: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for StackRef&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OpensslString","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OpensslStringRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Mode","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Cipher","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Crypter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509CheckFlags","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509VerifyParam","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509VerifyParamRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BasicConstraints","synthetic":true,"types":[]},{"text":"impl UnwindSafe for KeyUsage","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExtendedKeyUsage","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SubjectKeyIdentifier","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AuthorityKeyIdentifier","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SubjectAlternativeName","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509StoreBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509StoreBuilderRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509Store","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509StoreRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509StoreContext","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509StoreContextRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509Builder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509Ref","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for X509v3Context&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509Extension","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509ExtensionRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509NameBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509Name","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509NameRef","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for X509NameEntries&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509NameEntry","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509NameEntryRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509ReqBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509Req","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509ReqRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509VerifyResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GeneralName","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GeneralNameRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509Algorithm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509AlgorithmRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509Object","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509ObjectRef","synthetic":true,"types":[]}];
implementors["openssl_probe"] = [{"text":"impl UnwindSafe for ProbeResult","synthetic":true,"types":[]}];
implementors["openssl_sys"] = [{"text":"impl UnwindSafe for AES_KEY","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ASN1_ENCODING","synthetic":true,"types":[]},{"text":"impl UnwindSafe for stack_st_ASN1_OBJECT","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BIO_METHOD","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CMS_ContentInfo","synthetic":true,"types":[]},{"text":"impl UnwindSafe for stack_st_void","synthetic":true,"types":[]},{"text":"impl UnwindSafe for point_conversion_form_t","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EC_METHOD","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EC_GROUP","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EC_POINT","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ECDSA_SIG","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ERR_STRING_DATA","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OCSP_CERTID","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OCSP_ONEREQ","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OCSP_REQUEST","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OCSP_BASICRESP","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ASN1_INTEGER","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ASN1_GENERALIZEDTIME","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ASN1_STRING","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ASN1_BIT_STRING","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ASN1_TIME","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ASN1_TYPE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ASN1_OBJECT","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ASN1_OCTET_STRING","synthetic":true,"types":[]},{"text":"impl UnwindSafe for bio_st","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BIO","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BIGNUM","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BN_BLINDING","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BN_MONT_CTX","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BN_CTX","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BN_GENCB","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EVP_CIPHER","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EVP_CIPHER_CTX","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EVP_MD","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EVP_MD_CTX","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EVP_PKEY","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PKCS8_PRIV_KEY_INFO","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EVP_PKEY_ASN1_METHOD","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EVP_PKEY_CTX","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HMAC_CTX","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DH","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DH_METHOD","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DSA","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DSA_METHOD","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RSA","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RSA_METHOD","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EC_KEY","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_ALGOR","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_CRL","synthetic":true,"types":[]},{"text":"impl UnwindSafe for stack_st_X509_CRL","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_NAME","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_STORE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_STORE_CTX","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_VERIFY_PARAM","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509V3_CTX","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CONF","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OPENSSL_INIT_SETTINGS","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ENGINE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SSL","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SSL_CTX","synthetic":true,"types":[]},{"text":"impl UnwindSafe for COMP_METHOD","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CRYPTO_EX_DATA","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OCSP_RESPONSE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PKCS12","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PKCS7_SIGNED","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PKCS7_ENVELOPE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PKCS7_SIGN_ENVELOPE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PKCS7_DIGEST","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PKCS7_ENCRYPT","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PKCS7","synthetic":true,"types":[]},{"text":"impl UnwindSafe for stack_st_OPENSSL_STRING","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SHA_CTX","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SHA256_CTX","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SHA512_CTX","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SSL_METHOD","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SSL_CIPHER","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SSL_SESSION","synthetic":true,"types":[]},{"text":"impl UnwindSafe for stack_st_SSL_CIPHER","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SRTP_PROTECTION_PROFILE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for stack_st_SRTP_PROTECTION_PROFILE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OPENSSL_STACK","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_VAL","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_NAME_ENTRY","synthetic":true,"types":[]},{"text":"impl UnwindSafe for stack_st_X509_NAME","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_EXTENSION","synthetic":true,"types":[]},{"text":"impl UnwindSafe for stack_st_X509_EXTENSION","synthetic":true,"types":[]},{"text":"impl UnwindSafe for stack_st_X509_ATTRIBUTE","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_REQ_INFO","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_REQ","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_CINF","synthetic":true,"types":[]},{"text":"impl UnwindSafe for stack_st_X509","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_OBJECT","synthetic":true,"types":[]},{"text":"impl UnwindSafe for stack_st_X509_OBJECT","synthetic":true,"types":[]},{"text":"impl UnwindSafe for X509_LOOKUP","synthetic":true,"types":[]},{"text":"impl UnwindSafe for stack_st_X509_LOOKUP","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CONF_METHOD","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GENERAL_NAME","synthetic":true,"types":[]},{"text":"impl UnwindSafe for stack_st_GENERAL_NAME","synthetic":true,"types":[]}];
implementors["parking_lot"] = [{"text":"impl UnwindSafe for WaitTimeoutResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Condvar","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OnceState","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Once","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RawFairMutex","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RawMutex","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RawRwLock","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RawThreadId","synthetic":true,"types":[]}];
implementors["parking_lot_core"] = [{"text":"impl UnwindSafe for ParkResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnparkResult","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RequeueOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FilterOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnparkToken","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParkToken","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SpinWait","synthetic":true,"types":[]}];
implementors["pear"] = [{"text":"impl&lt;'a&gt; UnwindSafe for Position&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Text&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'s&gt; UnwindSafe for StringFile&lt;'s&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, I, S&gt; UnwindSafe for Expected&lt;T, I, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for ParseErr&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Input&gt;::Context: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Input&gt;::InSlice: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Input&gt;::Slice: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Input&gt;::Token: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["percent_encoding"] = [{"text":"impl UnwindSafe for SIMPLE_ENCODE_SET","synthetic":true,"types":[]},{"text":"impl UnwindSafe for QUERY_ENCODE_SET","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DEFAULT_ENCODE_SET","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PATH_SEGMENT_ENCODE_SET","synthetic":true,"types":[]},{"text":"impl UnwindSafe for USERINFO_ENCODE_SET","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; UnwindSafe for PercentEncode&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for PercentDecode&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["phf"] = [{"text":"impl&lt;K, V&gt; UnwindSafe for Map&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; UnwindSafe for Entries&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; UnwindSafe for Keys&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; UnwindSafe for Values&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Set&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; UnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["phf_shared"] = [{"text":"impl UnwindSafe for Hashes","synthetic":true,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl !UnwindSafe for IntoIter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TokenStream","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LexError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Span","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TokenTree","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Delimiter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Punct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Spacing","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ident","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Literal","synthetic":true,"types":[]}];
implementors["r2d2"] = [{"text":"impl&lt;M&gt; !UnwindSafe for Builder&lt;M&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NopEventHandler","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AcquireEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReleaseEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CheckoutEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TimeoutEvent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CheckinEvent","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Extensions","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NopErrorHandler","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LoggingErrorHandler","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NopConnectionCustomizer","synthetic":true,"types":[]},{"text":"impl&lt;M&gt; !UnwindSafe for Pool&lt;M&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for State","synthetic":true,"types":[]},{"text":"impl&lt;M&gt; !UnwindSafe for PooledConnection&lt;M&gt;","synthetic":true,"types":[]}];
implementors["rand"] = [{"text":"impl UnwindSafe for Bernoulli","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BernoulliError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Binomial","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Cauchy","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dirichlet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Exp1","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Exp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Gamma","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChiSquared","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FisherF","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StudentT","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Beta","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StandardNormal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Normal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LogNormal","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pareto","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Poisson","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Triangular","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; UnwindSafe for Uniform&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; UnwindSafe for UniformInt&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; UnwindSafe for UniformFloat&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UniformDuration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnitCircle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnitSphereSurface","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Weibull","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; UnwindSafe for WeightedIndex&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;W as SampleUniform&gt;::Sampler: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; UnwindSafe for WeightedIndex&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WeightedError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OpenClosed01","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Open01","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Alphanumeric","synthetic":true,"types":[]},{"text":"impl&lt;D, R, T&gt; UnwindSafe for DistIter&lt;D, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Standard","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for ReadRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ReadError","synthetic":true,"types":[]},{"text":"impl&lt;R, Rsdr&gt; UnwindSafe for ReseedingRng&lt;R, Rsdr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Rsdr: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EntropyRng","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StepRng","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SmallRng","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StdRng","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ThreadRng","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IndexVec","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for IndexVecIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IndexVecIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized, T&gt; UnwindSafe for SliceChooseIter&lt;'a, S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rand_chacha"] = [{"text":"impl UnwindSafe for ChaCha20Core","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChaCha20Rng","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChaCha12Core","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChaCha12Rng","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChaCha8Core","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ChaCha8Rng","synthetic":true,"types":[]}];
implementors["rand_core"] = [{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; UnwindSafe for BlockRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; UnwindSafe for BlockRng64&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OsRng","synthetic":true,"types":[]}];
implementors["rand_hc"] = [{"text":"impl UnwindSafe for Hc128Rng","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Hc128Core","synthetic":true,"types":[]}];
implementors["rand_isaac"] = [{"text":"impl UnwindSafe for IsaacRng","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IsaacCore","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Isaac64Rng","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Isaac64Core","synthetic":true,"types":[]}];
implementors["rand_jitter"] = [{"text":"impl UnwindSafe for TimerError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for JitterRng","synthetic":true,"types":[]}];
implementors["rand_os"] = [{"text":"impl UnwindSafe for OsRng","synthetic":true,"types":[]}];
implementors["rand_pcg"] = [{"text":"impl UnwindSafe for Lcg64Xsh32","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Lcg128Xsl64","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Mcg128Xsl64","synthetic":true,"types":[]}];
implementors["rand_xorshift"] = [{"text":"impl UnwindSafe for XorShiftRng","synthetic":true,"types":[]}];
implementors["rocket"] = [{"text":"impl UnwindSafe for LoggingLevel","synthetic":true,"types":[]},{"text":"impl&lt;'c&gt; !UnwindSafe for LocalRequest&lt;'c&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c&gt; !UnwindSafe for LocalResponse&lt;'c&gt;","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Client","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; !UnwindSafe for Request&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'f&gt; UnwindSafe for FormItems&lt;'f&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'f&gt; UnwindSafe for FormItem&lt;'f&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for LenientForm&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'f&gt; UnwindSafe for FormParseError&lt;'f&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'f, E&gt; !UnwindSafe for FormDataError&lt;'f, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Form&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'r, T&gt; UnwindSafe for State&lt;'r, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'q&gt; UnwindSafe for Query&lt;'q&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Redirect","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NamedFile","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Stream&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Body&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; !UnwindSafe for ResponseBuilder&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; !UnwindSafe for Response&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for Debug&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for Flash&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for Content&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for Json&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for Xml&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for MsgPack&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for Html&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for Plain&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for Css&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for JavaScript&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for Created&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for Accepted&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NoContent","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for BadRequest&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for Unauthorized&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for Forbidden&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for NotFound&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for Conflict&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for Custom&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, E, F&gt; UnwindSafe for Outcome&lt;S, E, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ConfigError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Environment","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConfigBuilder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Limits","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Data","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DataStream","synthetic":true,"types":[]},{"text":"impl&lt;T, B&gt; UnwindSafe for Transform&lt;T, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for AdHoc","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Info","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Kind","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for LaunchErrorKind","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for LaunchError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RouteUriError","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Route","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Rocket","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Catcher","synthetic":true,"types":[]}];
implementors["rocket_http"] = [{"text":"impl&lt;'a&gt; UnwindSafe for Uri&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'i, P&gt; !UnwindSafe for Formatter&lt;'i, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Origin&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Authority&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Absolute&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Segments&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SegmentError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Error&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Path","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Query","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Cookies&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Method","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MediaType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ContentType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StatusClass","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Status","synthetic":true,"types":[]},{"text":"impl&lt;'h&gt; UnwindSafe for Header&lt;'h&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'h&gt; UnwindSafe for HeaderMap&lt;'h&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for QMediaType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Accept","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RawStr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UncasedStr","synthetic":true,"types":[]},{"text":"impl&lt;'s&gt; UnwindSafe for Uncased&lt;'s&gt;","synthetic":true,"types":[]}];
implementors["rust_embed"] = [{"text":"impl !UnwindSafe for Filenames","synthetic":true,"types":[]}];
implementors["rust_embed_utils"] = [{"text":"impl UnwindSafe for FileEntry","synthetic":true,"types":[]}];
implementors["same_file"] = [{"text":"impl UnwindSafe for Handle","synthetic":true,"types":[]}];
implementors["scheduled_thread_pool"] = [{"text":"impl UnwindSafe for JobHandle","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for ScheduledThreadPool","synthetic":true,"types":[]}];
implementors["serde"] = [{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for UnitDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for BoolDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for I8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for I16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for I32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for I64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for IsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for U8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for U16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for U64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for UsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for F32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for F64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for CharDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for I128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for U128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for U32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; UnwindSafe for StrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; UnwindSafe for BorrowedStrDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; UnwindSafe for StringDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; UnwindSafe for CowStrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; UnwindSafe for BorrowedBytesDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; UnwindSafe for SeqDeserializer&lt;I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for SeqAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, I, E&gt; UnwindSafe for MapDeserializer&lt;'de, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as Iterator&gt;::Item as Pair&gt;::Second: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; UnwindSafe for MapAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IgnoredAny","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Unexpected&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Ok, Error&gt; UnwindSafe for Impossible&lt;Ok, Error&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Error: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ok: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["serde_json"] = [{"text":"impl&lt;'a&gt; UnwindSafe for SliceRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for StrRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for IoRead&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for Deserializer&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, R, T&gt; UnwindSafe for StreamDeserializer&lt;'de, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Category","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; UnwindSafe for Map&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Entry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for VacantEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for OccupiedEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for IterMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Keys&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for ValuesMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W, F&gt; UnwindSafe for Serializer&lt;W, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CharEscape","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CompactFormatter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for PrettyFormatter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Serializer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Number","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Value","synthetic":true,"types":[]}];
implementors["sha2"] = [{"text":"impl UnwindSafe for Sha256","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sha224","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sha512","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sha384","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sha512Trunc256","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sha512Trunc224","synthetic":true,"types":[]}];
implementors["state"] = [{"text":"impl UnwindSafe for Container","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; UnwindSafe for Storage&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["strum"] = [{"text":"impl UnwindSafe for ParseError","synthetic":true,"types":[]}];
implementors["syn"] = [{"text":"impl UnwindSafe for Underscore","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Abstract","synthetic":true,"types":[]},{"text":"impl UnwindSafe for As","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Async","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Auto","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Become","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Box","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Break","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Const","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Continue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Crate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Default","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Do","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dyn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Else","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Enum","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Existential","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Extern","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Final","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Fn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for For","synthetic":true,"types":[]},{"text":"impl UnwindSafe for If","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Impl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for In","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Let","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Loop","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Macro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Match","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Mod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Move","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Mut","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Override","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Priv","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pub","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ref","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Return","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SelfType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SelfValue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Static","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Struct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Super","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Trait","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Try","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Typeof","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Union","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Unsafe","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Unsized","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Use","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Virtual","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Where","synthetic":true,"types":[]},{"text":"impl UnwindSafe for While","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Yield","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Add","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AddEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for And","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AndAnd","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AndEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for At","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bang","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Caret","synthetic":true,"types":[]},{"text":"impl UnwindSafe for CaretEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Colon","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Colon2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Comma","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Div","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DivEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dollar","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dot","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dot2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Dot3","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DotDotEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Eq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for EqEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ge","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Gt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Le","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Lt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MulEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Ne","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Or","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OrEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OrOr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pound","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Question","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RArrow","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LArrow","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Rem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RemEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FatArrow","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Semi","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Shl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ShlEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Shr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ShrEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Star","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Sub","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SubEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Tilde","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Brace","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Bracket","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Paren","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Attribute","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AttrStyle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Meta","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MetaList","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MetaNameValue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for NestedMeta","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Variant","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Fields","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FieldsNamed","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FieldsUnnamed","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Field","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Visibility","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VisPublic","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VisCrate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for VisRestricted","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Expr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprBox","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprInPlace","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprArray","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprCall","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprMethodCall","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprTuple","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprBinary","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprUnary","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprLit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprCast","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprLet","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprIf","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprWhile","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprForLoop","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprLoop","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprMatch","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprClosure","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprUnsafe","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprBlock","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprAssign","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprAssignOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprField","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprIndex","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprPath","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprReference","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprBreak","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprContinue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprReturn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprMacro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprStruct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprRepeat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprParen","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprGroup","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprTry","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprAsync","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprTryBlock","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprYield","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ExprVerbatim","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Member","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Index","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MethodTurbofish","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GenericMethodArgument","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FieldValue","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Label","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Block","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Stmt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Local","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Pat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatWild","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatIdent","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatStruct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatTupleStruct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatPath","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatTuple","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatBox","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatLit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatRange","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatSlice","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatMacro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PatVerbatim","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Arm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for RangeLimits","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FieldPat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Generics","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GenericParam","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeParam","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LifetimeDef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ConstParam","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for ImplGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for TypeGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Turbofish&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BoundLifetimes","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeParamBound","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraitBound","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraitBoundModifier","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WhereClause","synthetic":true,"types":[]},{"text":"impl UnwindSafe for WherePredicate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PredicateType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PredicateLifetime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PredicateEq","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Item","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemExternCrate","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemUse","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemStatic","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemConst","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemFn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemMod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemForeignMod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemExistential","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemStruct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemEnum","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemUnion","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemTrait","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemTraitAlias","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemImpl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemMacro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemMacro2","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ItemVerbatim","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UseTree","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UsePath","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UseName","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UseRename","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UseGlob","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UseGroup","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ForeignItem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ForeignItemFn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ForeignItemStatic","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ForeignItemType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ForeignItemMacro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ForeignItemVerbatim","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraitItem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraitItemConst","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraitItemMethod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraitItemType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraitItemMacro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TraitItemVerbatim","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImplItem","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImplItemConst","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImplItemMethod","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImplItemType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImplItemExistential","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImplItemMacro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ImplItemVerbatim","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MethodSig","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FnDecl","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FnArg","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ArgSelfRef","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ArgSelf","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ArgCaptured","synthetic":true,"types":[]},{"text":"impl UnwindSafe for File","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Lifetime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Lit","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitStr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitByteStr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitByte","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitChar","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitInt","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitFloat","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitBool","synthetic":true,"types":[]},{"text":"impl UnwindSafe for LitVerbatim","synthetic":true,"types":[]},{"text":"impl UnwindSafe for StrStyle","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IntSuffix","synthetic":true,"types":[]},{"text":"impl UnwindSafe for FloatSuffix","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Macro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for MacroDelimiter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DeriveInput","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Data","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DataStruct","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DataEnum","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DataUnion","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BinOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for UnOp","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeSlice","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeArray","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypePtr","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeReference","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeBareFn","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeNever","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeTuple","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypePath","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeTraitObject","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeImplTrait","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeParen","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeGroup","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeInfer","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeMacro","synthetic":true,"types":[]},{"text":"impl UnwindSafe for TypeVerbatim","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Abi","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BareFnArg","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BareFnArgName","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ReturnType","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Path","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PathSegment","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PathArguments","synthetic":true,"types":[]},{"text":"impl UnwindSafe for GenericArgument","synthetic":true,"types":[]},{"text":"impl UnwindSafe for AngleBracketedGenericArguments","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Binding","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Constraint","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParenthesizedGenericArguments","synthetic":true,"types":[]},{"text":"impl UnwindSafe for QSelf","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for TokenBuffer","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Cursor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; UnwindSafe for Punctuated&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; UnwindSafe for Pairs&lt;'a, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; !UnwindSafe for PairsMut&lt;'a, T, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; UnwindSafe for IntoPairs&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; UnwindSafe for IntoIter&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !UnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; UnwindSafe for Pair&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Lookahead1&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for ParseBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 'a&gt; !UnwindSafe for StepCursor&lt;'c, 'a&gt;","synthetic":true,"types":[]}];
implementors["time"] = [{"text":"impl UnwindSafe for Duration","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OutOfRangeError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Timespec","synthetic":true,"types":[]},{"text":"impl UnwindSafe for PreciseTime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SteadyTime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Tm","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParseError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for TmFmt&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["toml"] = [{"text":"impl UnwindSafe for Datetime","synthetic":true,"types":[]},{"text":"impl UnwindSafe for DatetimeParseError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Value","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for Serializer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for Deserializer&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["unicase"] = [{"text":"impl&lt;S&gt; UnwindSafe for UniCase&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["unicode_bidi"] = [{"text":"impl UnwindSafe for Level","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BidiClass","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParagraphInfo","synthetic":true,"types":[]},{"text":"impl&lt;'text&gt; UnwindSafe for InitialInfo&lt;'text&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'text&gt; UnwindSafe for BidiInfo&lt;'text&gt;","synthetic":true,"types":[]}];
implementors["unicode_normalization"] = [{"text":"impl&lt;I&gt; UnwindSafe for Decompositions&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for IsNormalized","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for Recompositions&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; UnwindSafe for StreamSafe&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["url"] = [{"text":"impl&lt;S&gt; UnwindSafe for Host&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Origin","synthetic":true,"types":[]},{"text":"impl UnwindSafe for OpaqueOrigin","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParseError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for SyntaxViolation","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for PathSegmentsMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Position","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Url","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for ParseOptions&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !UnwindSafe for UrlQuery&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["uuid"] = [{"text":"impl UnwindSafe for Hyphenated","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for HyphenatedRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Simple","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for SimpleRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Urn","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; UnwindSafe for UrnRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Expected","synthetic":true,"types":[]},{"text":"impl UnwindSafe for ParseError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BytesError","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Version","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Variant","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Uuid","synthetic":true,"types":[]}];
implementors["walkdir"] = [{"text":"impl UnwindSafe for DirEntry","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for WalkDir","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; UnwindSafe for FilterEntry&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["yansi"] = [{"text":"impl&lt;T&gt; UnwindSafe for Paint&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Style","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Color","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()